import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;

public class Generate_public_private_key_pairs {
    // Generate Public / Private Key Pairs/Hasilkan Pasangan Kunci Publik / Pribadi

    // Untuk menghasilkan pasangan kunci menggunakan algoritma dan ukuran kunci yang
    // berbeda:
    /*
     * final KeyPairGenerator dhGenerator =
     * KeyPairGenerator.getInstance("DiffieHellman");
     * final KeyPairGenerator dsaGenerator = KeyPairGenerator.getInstance("DSA");
     * final KeyPairGenerator rsaGenerator = KeyPairGenerator.getInstance("RSA");
     * dhGenerator.initialize(1024);
     * dsaGenerator.initialize(1024);
     * rsaGenerator.initialize(2048);
     * final KeyPair dhPair = dhGenerator.generateKeyPair();
     * final KeyPair dsaPair = dsaGenerator.generateKeyPair();
     * final KeyPair rsaPair = rsaGenerator.generateKeyPair();
     */

    /*
     * Algoritme tambahan dan ukuran kunci mungkin tersedia pada implementasi Anda
     * pada platform Java.
     * Untuk menentukan sumber keacakan yang akan digunakan saat membuat kunci:
     */

    /*
     * final KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
     * generator.initialize(2048, SecureRandom.getInstance("SHA1PRNG", "SUN"));
     * final KeyPair pair = generator.generateKeyPair();
     */

    public static void main(String[] args) throws Exception {
        // final KeyPairGenerator dhGenerator =
        // KeyPairGenerator.getInstance("DiffieHellman");
        // final KeyPairGenerator dsaGenerator = KeyPairGenerator.getInstance("DSA");
        // final KeyPairGenerator rsaGenerator = KeyPairGenerator.getInstance("RSA");
        // dhGenerator.initialize(1024);
        // dsaGenerator.initialize(1024);
        // rsaGenerator.initialize(2048);
        // final KeyPair dhPair = dhGenerator.generateKeyPair();
        // final KeyPair dsaPair = dsaGenerator.generateKeyPair();
        // final KeyPair rsaPair = rsaGenerator.generateKeyPair();

        // System.out.println("Diffie-Hellman Public Key: " + dhPair.getPublic());
        /*
         * Diffie-Hellman Public Key: SunJCE Diffie-Hellman Public Key:
         * y:
         * fa38bb30 58d3b7d6 c0637a1b eab1e6f4 cd1ceb4c 9b7109ae 30ed4bce e091927d
         * d115eff8 ed494b35 19a268b8 5761cce7 c9911e05 5e1f598a fa3079c6 4e811188
         * a15076a9 70eb31a6 e2a2eefe 5f918f8b ab35b3e4 33cf2171 fce56433 23c239e4
         * ab9bef06 6838370a 4fde2e84 f48b649d 276b9a5a d24c11ce 7b63475e 8314f394
         * p:
         * ffffffff ffffffff c90fdaa2 2168c234 c4c6628b 80dc1cd1 29024e08 8a67cc74
         * 020bbea6 3b139b22 514a0879 8e3404dd ef9519b3 cd3a431b 302b0a6d f25f1437
         * 4fe1356d 6d51c245 e485b576 625e7ec6 f44c42e9 a637ed6b 0bff5cb6 f406b7ed
         * ee386bfb 5a899fa5 ae9f2411 7c4b1fe6 49286651 ece65381 ffffffff ffffffff
         * g:
         * 02
         * l:
         * 160
         */

        // System.out.println("Diffie-Hellman Private Key: " + dhPair.getPrivate());
        // System.out.println();
        /*
         * Diffie-Hellman Private Key: com.sun.crypto.provider.DHPrivateKey@62747a82
         */
        // System.out.println("DSA Public Key: " + dsaPair.getPublic());
        // System.out.println("DSA Private Key: " + dsaPair.getPrivate());
        // System.out.println();
        /*
         * DSA Public Key: Sun DSA Public Key
         * Parameters:
         * p:
         * fd7f5381 1d751229 52df4a9c 2eece4e7 f611b752 3cef4400 c31e3f80 b6512669
         * 455d4022 51fb593d 8d58fabf c5f5ba30 f6cb9b55 6cd7813b 801d346f f26660b7
         * 6b9950a5 a49f9fe8 047b1022 c24fbba9 d7feb7c6 1bf83b57 e7c6a8a6 150f04fb
         * 83f6d3c5 1ec30235 54135a16 9132f675 f3ae2b61 d72aeff2 2203199d d14801c7
         * q:
         * 9760508f 15230bcc b292b982 a2eb840b f0581cf5
         * g:
         * f7e1a085 d69b3dde cbbcab5c 36b857b9 7994afbb fa3aea82 f9574c0b 3d078267
         * 5159578e bad4594f e6710710 8180b449 167123e8 4c281613 b7cf0932 8cc8a6e1
         * 3c167a8b 547c8d28 e0a3ae1e 2bb3a675 916ea37f 0bfa2135 62f1fb62 7a01243b
         * cca4f1be a8519089 a883dfe1 5ae59f06 928b665e 807b5525 64014c3b fecf492a
         * 
         * y:
         * 42f66c4e b5786c94 26498b41 38ec2afc 9aa58724 3e708a0d b8b229b3 55c3727f
         * 0e321401 54740782 969e52cb 5c51a668 e2d4a22a 422acef7 7d8d7774 324dd5d2
         * 71f03999 7f2553d7 24e79a39 7938b679 bdca3674 78f08150 b1c8bad7 0c2e8112
         * 2af0bf96 fb916df2 06d86c79 022f6b9a 9932fc44 366b4e68 0d4b0317 6aba44f3
         * 
         * DSA Private Key: sun.security.provider.DSAPrivateKey@fffd794c
         */
        // System.out.println("RSA Public Key: " + rsaPair.getPublic());
        // System.out.println("RSA Private Key: " + rsaPair.getPrivate());
        /*
         * RSA Public Key: Sun RSA public key, 2048 bits
         * params: null
         * modulus:
         * 16681499510797448419430978875624640988255248808279658359833863378398161047427824358358802682461792866124707703413614778909518908768736683313835868921863294010124822052074875069186116760257526072681084434189363431008396482147371219170511349808113663516364792867924278115456695064021286338532608579905186621947351871424105552890013260420376431204683389682228662023489485963544867341793100337399149791859099929379893946287635801281180929113348495206287094275070163430801929629799413938431435319215512958893235267628886826624711173268277265206949625633187626396956195144265408042889980828298277753668333399361691144050037
         * public exponent: 65537
         * RSA Private Key: SunRsaSign RSA private CRT key, 2048 bits
         * params: null
         * modulus:
         * 16681499510797448419430978875624640988255248808279658359833863378398161047427824358358802682461792866124707703413614778909518908768736683313835868921863294010124822052074875069186116760257526072681084434189363431008396482147371219170511349808113663516364792867924278115456695064021286338532608579905186621947351871424105552890013260420376431204683389682228662023489485963544867341793100337399149791859099929379893946287635801281180929113348495206287094275070163430801929629799413938431435319215512958893235267628886826624711173268277265206949625633187626396956195144265408042889980828298277753668333399361691144050037
         * private exponent:
         * 15716300521753947429051769087316225305092090539195073095014143068788538594586737491903264898127827036923723654535203694459133695804288363996105951242511086693854725385741842945922101703802446669174566403543376185171940137482482199790701791261455027752535882564505310774659713394387816423893310904775100294064773947523519732706854038799532604889869366210628514247371732609622206950757086737633075411880021453139628887716665266794064133377706144180253175125599534269872019978137024744888011186251039290129281292783071966856496030398037144428059162551151408252486739487346762670005349825066274134555147570497009523156973
         */
        // -----------------------------------
        try {
            final KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
            generator.initialize(2048, SecureRandom.getInstance("SHA1PRNG", "SUN"));
            final KeyPair pair = generator.generateKeyPair();

            System.out.println("RSA Public Key: " + pair.getPublic());
            /*
             * output:
             * RSA Public Key: Sun RSA public key, 2048 bits
             * params: null
             * modulus:
             * 20591290349373166351361298726457986090483100997955925088122289920117426550468391658097981955884384039533676133080526025415541346019147425481207611430126887698949488954886275432960001803599143863939379578615912003542018366255698136752940036539195246884891287367107047644323916651334618346252054781130502318323471968364868085145809542922718018405997018334482764763147061338903752130585613126769054792332671433193863934429114643533383736745728836294526401029385273103790856847014852723484598241151881951735800005234911641466660530439073391226579603055845165799215655484053467395112608878611155751934926160577635345047319
             * public exponent: 65537
             */
            System.out.println("RSA Private Key: " + pair.getPrivate());
            /*
             * output:
             * RSA Private Key: SunRsaSign RSA private CRT key, 2048 bits
             * params: null
             * modulus:
             * 20591290349373166351361298726457986090483100997955925088122289920117426550468391658097981955884384039533676133080526025415541346019147425481207611430126887698949488954886275432960001803599143863939379578615912003542018366255698136752940036539195246884891287367107047644323916651334618346252054781130502318323471968364868085145809542922718018405997018334482764763147061338903752130585613126769054792332671433193863934429114643533383736745728836294526401029385273103790856847014852723484598241151881951735800005234911641466660530439073391226579603055845165799215655484053467395112608878611155751934926160577635345047319
             * private exponent:
             * 5919402935474471734434698994559843415852138834574204322142056275005146958371980695463112135875334472203708719459803016903868028121530394983993032933207051959171282968552991884843163922361534253881287078461384899319950959309357353806634272066137272858253381357039485750325199348629693297578294888025064676094553359341028908938295419679545712684183216021014502288621246796463649558517983689467805335905152476266159288460030842597060658825612830700827402809681394845324044511301608970454957218794156326075845607460996257036525478356374684653361249059005423446759705642837261899896927050844163609388004858396930251307073
             */
        } catch (NoSuchAlgorithmException | NoSuchProviderException e) {
            e.printStackTrace();

        }
    }
}
